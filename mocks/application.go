// Code generated by MockGen. DO NOT EDIT.
// Source: application/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=application/interfaces.go -destination=mocks/application.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// Expand mocks base method.
func (m *MockUseCases) Expand(shortened string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", shortened)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expand indicates an expected call of Expand.
func (mr *MockUseCasesMockRecorder) Expand(shortened any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockUseCases)(nil).Expand), shortened)
}

// Shorten mocks base method.
func (m *MockUseCases) Shorten(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockUseCasesMockRecorder) Shorten(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockUseCases)(nil).Shorten), url)
}

// MockDal is a mock of Dal interface.
type MockDal struct {
	ctrl     *gomock.Controller
	recorder *MockDalMockRecorder
}

// MockDalMockRecorder is the mock recorder for MockDal.
type MockDalMockRecorder struct {
	mock *MockDal
}

// NewMockDal creates a new mock instance.
func NewMockDal(ctrl *gomock.Controller) *MockDal {
	mock := &MockDal{ctrl: ctrl}
	mock.recorder = &MockDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDal) EXPECT() *MockDalMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockDal) Find(short string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDalMockRecorder) Find(short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDal)(nil).Find), short)
}

// Save mocks base method.
func (m *MockDal) Save(shortened, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", shortened, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDalMockRecorder) Save(shortened, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDal)(nil).Save), shortened, url)
}
